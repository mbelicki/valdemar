-- this is a comment
module simple_test = export < 
    --@ This is a documentation comment for exported symbol.
    int_t,

    --@ Documentation comments work for next item immediately below them.
    maybe,

    --@ They apparently can
    --@ span among multiple lines.
    list,

    --@ some extran formatting is available:
    --@ param a @ first argument
    --@ param b @ second argument
    --@ result @ 
    divide (int_t a, int_t b) -> maybe:int_t
>

use valdemar.collections
use valdemar.math
use valdemar.graphics

type_macro(param_t) maybe = sum <val just param_t, val nothing unit_t>
type_macro(param_t) list = product <
    mut_val next ptr:list:param_t next,
    mut_val value param_t,
>

type int_t = int64_t -- alias using type
type list_t = list:int_t -- expanding type macros works here

type_macro(a_t, b_t) pair = product <a_t a, b_t b>

type point2_t = pair:int_t#int_t 

fn_macro(param_t)
        append(list:param_t list, param_t item) -> unit_t = {
    list.next = heap_alloc:list:param(1)
    list.next->next = null
    list.next->value = item
}

fn divide (a int_t, b int_t) -> maybe:int_t = if (b == 0) unit else a / b
fn add_two (a int_t, b int_t) -> (c int_t, d int_t) = return (a + 2, b + 2)

val numbers array:int_t = [1, 2, 3] -- comma after 3 would be legal


type point_t = product<int_t x, int_t y> -- comma after y would be legal
type number_t = sum<float_t real, int_t integer>

type large_record_t = product <
    int_t age,
    str_t name,
    number_t something,
>

fn returns_nothing() -> unit_t = puts("oh hai!")
fn random_number() -> int_t = return 4

fn start () -> int_t = {
    val a int_t = 0
    val b int_t = 1

    val c int_t, val d int_t = 2, 3
    val name str_t = "valdemar"

    mut_val i = 0
    i = a + b

    val c int_t, i = add_two(a, b)

    val loc ptr:int_t = address_of(a)

    val n number_t = a

    if (n +? real) {
        puts("a float")
    } else if (n +? integer) {
        puts("an integer")
    }

    if (divide(a, b) +? just) {

    }

    puts("hello, world")
    return 0
}
