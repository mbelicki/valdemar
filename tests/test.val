-- this is the first code ever written and compiled in valdemar

fn sq (a double_t) -> double_t {
    ret a * a
}

fn add_sq (a double_t, b double_t) -> double_t {
    ret sq(a) + sq(b)
}

fn inc (a double_t) -> double_t {
    ret a + 1.0
}

ext_c sin (a double_t) -> double_t

fn cos_sq (a double_t) -> double_t {
    ret 1.0 - sq(sin(a))
}

fn locals() -> double_t {
    val pi double_t = 3.14
    val a double_t = cos_sq(pi)
    ret a * pi * 2.0
}

ext_c print_float (a double_t) -> unit_t

fn side_effects(a double_t) -> unit_t {
    print_float(a)
}

fn booleans(a bool_t, b bool_t) -> bool_t {
    ret a | b & b
}

fn no_braces(a double_t) -> double_t ret 2.0 * a

fn branching (a double_t, more bool_t) -> unit_t {
    if more {
        print_float(a + 1.0)
        print_float(a + 2.0)
    }

    if not more print_float(a - 1.0)
}

fn count_down(a double_t) -> unit_t {
    if a > 0.0 {
        print_float(a)
        count_down(a - 1.0)
    }
}

fn vald_fabs(a double_t) -> double_t {
    if a < 0.0 ret a * -1.0
    ret a
}

fn compare_float (a double_t, b double_t, eps double_t) -> bool_t
    ret vald_fabs(a - b) < eps

fn mutability () -> unit_t {
    mutval a double_t = 0.0
    a = a + 1.0
    if a > 0.0 {
        a = a + 2.0
    }
    print_float(a)
}

fn get_int() -> int_t ret 4

fn arrays () -> unit_t {
    val arr ^[double_t] = [1.0, 2.1, 3.2]
    val item double_t = arr[0]
    print_float(item)
    print_float(arr[1])
    print_float(arr[2])
}

fn main () -> unit_t {
    arrays()
    val a int_t = get_int()
}

