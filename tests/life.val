ext_c printf (s ^byte_t) -> unit_t
ext_c print_int (i int_t) -> unit_t

-- a handy wrapper for printf:
fn put (s str_t) -> unit_t printf(@s[0])

tuple board_t {
    width, height int_t,
    data ^[int_t],
}

fn get (b ^board_t, i, j int_t) -> int_t {
    if i < 0 | i >= b->width { return 0 }
    if j < 0 | j >= b->height { return 0 }

    return b->data[i + j * b->width]
}

fn set (b ^board_t, i, j int_t, v int_t) -> unit_t {
    -- TODO: language error, return without value impossible
    -- if i < 0 | i >= b->width return
    -- if j < 0 | j >= b->height return

    b->data[i + j * b->width] = v
}

fn print_board (b ^board_t) -> unit_t {
    val !j = 0 while j < b->height; j = j + 1 {
        val !i = 0 while i < b->width; i = i + 1 {
            val v = get(b, i, j)
            if v == 0 { put(".") }
            if v == 1 { put("#") }
            if v > 1  { put("!") }
        }
        put("\n")
    }
    put("\n")
}

fn count_ative_neighbors (b ^board_t, oi, oj int_t) -> int_t {
    val !result = 0
    val !j = -1 while j < 2; j = j + 1 {
        val !i = -1 while i < 2; i = i + 1 {
            if i /= 0 | j /= 0 {
                result = result + get(b, oi + i, oj + j)
            }
        }
    }
    return result
}

fn update (in, out ^board_t) -> unit_t {
    val !j = 0 while j < in->height; j = j + 1 {
        val !i = 0 while i < in->width; i = i + 1 {
            val v = get(in, i, j)
            val n = count_ative_neighbors(in, i, j)
            
            set(out, i, j, v)
            if v == 1 {
                if n < 2 { set(out, i, j, 0) }
                if n > 3 { set(out, i, j, 0) }
            }
            if v == 0 {
                if n == 3 { set(out, i, j, 1) }
            }
        }
    }
}

fn main () -> int_t {
    -- TODO: heap allocation would be handy
    val board1 board_t = (7, 7, [
        0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0,
        0, 0, 1, 1, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
    ])
    val board2 board_t = (7, 7, [
        0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
    ])
    
    val (!in, !out) = (@board1, @board2)
    val !i = 8 while i > 0; i = i - 1 {
        print_board(in)
        update(in, out)

        val tmp ^board_t = out
        out = in
        in = tmp
    }
    return 0
}
